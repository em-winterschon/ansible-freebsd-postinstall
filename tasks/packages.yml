---

- name: "FreeBSD postinstall packages Debug"
  vars:
    msg: |
         freebsd_install_method [{{ freebsd_install_method }}]
         freebsd_use_packages [{{ freebsd_use_packages }}]
         freebsd_install_retries [{{ freebsd_install_retries }}]
         freebsd_install_delay [{{ freebsd_install_delay }}]

         fp_pkg_autoremove [{{ fp_pkg_autoremove|default('NOT DEFINED') }}]
         fp_pkg_cached [{{ fp_pkg_cached|default('NOT DEFINED') }}]
         fp_pkg_chroot [{{ fp_pkg_chroot|default('NOT DEFINED') }}]
         fp_pkg_jail [{{ fp_pkg_jail|default('NOT DEFINED') }}]
         fp_pkg_pkgsite [{{ fp_pkg_pkgsite|default('NOT DEFINED') }}]
         fp_pkg_rootdir [{{ fp_pkg_rootdir|default('NOT DEFINED') }}]
         fp_pkg_state [{{ fp_pkg_state|default('NOT DEFINED') }}]
         fp_packages
         {{ fp_packages|to_yaml }}
         fp_links
         {{ fp_links|to_yaml }}

         ansible_architecture [{{ ansible_architecture }}]
         pkg_dict_{{ ansible_architecture }}
         {{ lookup('vars', 'pkg_dict_' + ansible_architecture)|to_yaml }}
  debug:
    msg: "{{ msg.split('\n') }}"
  when: fp_debug|bool

- name: "packages: Install packages"
  include_tasks: packages-install.yml
  loop: "{{ fp_packages }}"
  when: item.enabled

# links
- name: "packages: Create symbolic links"
  file:
    src: "{{ item.target }}"
    dest: "{{ item.link }}"
    state: "link"
    force: true
  loop: "{{ fp_links }}"
  tags: fp_packages_links

# EOF
...
